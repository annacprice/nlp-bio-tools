#!/usr/bin/env python2
#----------------------------------------------------------------------
# Author: Anna Price

# This script is part of the bioNLPtools software tool.

# It takes the input txt files created using pdf2nlp
# and fits them to the saved ML model generated by mlpipe.
# Note 0 is the negative class and 1 is the positive.

# This script is designed to be used with the accompanying Dockerfile.
# The saved ML model should be placed in data/models and the txt files
# from pdf2nlp in data/text. Results are saved to data/output on
# local machine.

# To build the Docker image from current directory:
# docker build -t loadmodel .

# To run the program in the Docker container from current directory:
# docker run -v $(pwd)/data:/data --rm loadmodel vectorizer.pkl model.pkl
#----------------------------------------------------------------------
from sklearn.externals import joblib
import numpy as np
import os
import glob
import sys

# Path for the input txt files and output results file
pathpapers = "/data/text/"
pathout = "/data/output/"

def load_model(vpkl, mpkl):
    # Load the vectorizer and the model
    Vectorizer = joblib.load("/data/models/" + vpkl)
    Model = joblib.load("/data/models/" + mpkl)

    # Get the input txt files and append to corpus
    file_list = glob.glob(os.path.join(os.getcwd(), pathpapers, "*.txt"))
    filesave = np.asarray(file_list)

    corpus = []
    for file_path in file_list:
        with open(file_path) as f_input:
            corpus.append(f_input.read())

    # Fit the corpus to the features used in the ML model
    Xclass = Vectorizer.transform(corpus)

    # Use ML model to predict the class and probability
    predictclass = Model.predict(Xclass)
    predictprob = Model.predict_proba(Xclass)

    # Save results to data/output on local machine
    with open(pathout + "MLresults.txt", "w") as file:
        np.savetxt(file, np.column_stack([filesave,\
                   predictclass,predictprob]),\
                   delimiter="\t",fmt="%s")

if __name__ == "__main__":
    load_model(*sys.argv[1:])
